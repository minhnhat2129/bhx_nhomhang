import streamlit as st
import pandas as pd
import plotly.express as px
import datetime
import os

st.set_page_config(page_title="Dashboard Doanh thu", layout="wide")
st.title(f"üìä Dashboard Doanh thu BHX")

#---------------------- upload

st.title("üìÇ Upload d·ªØ li·ªáu")

# √î ch·ªçn file
uploaded_file = st.file_uploader("Ch·ªçn file Excel ho·∫∑c CSV", type=["xlsx", "csv"])

# N√∫t upload
if uploaded_file is not None:
    if st.button("üì• Upload file"):
        file_path = uploaded_file.name  # L∆∞u ngay c√πng th∆∞ m·ª•c v·ªõi code
        with open(file_path, "wb") as f:
            f.write(uploaded_file.getbuffer())

        st.success(f"‚úÖ File ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {os.path.abspath(file_path)}")

        # Xem th·ª≠ d·ªØ li·ªáu n·∫øu l√† Excel/CSV
        try:
            if uploaded_file.name.endswith(".xlsx"):
                df = pd.read_excel(file_path)
            else:
                df = pd.read_csv(file_path)

            st.write("üìä Xem tr∆∞·ªõc d·ªØ li·ªáu:")
            st.dataframe(df.head())
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file: {e}")

#----------------------

if "authenticated" not in st.session_state:
    st.session_state["authenticated"] = False

PASSWORD="BHX123"

#* password_input = st.text_input("Nh·∫≠p m·∫≠t kh·∫©u ƒë·ªÉ truy c·∫≠p:", type="password")

#if password_input != PASSWORD:
  #  st.warning("Vui l√≤ng nh·∫≠p ƒë√∫ng m·∫≠t kh·∫©u ƒë·ªÉ xem n·ªôi dung üö´")
 #   st.stop()   # D·ª´ng l·∫°i, kh√¥ng ch·∫°y c√°c ph·∫ßn d∆∞·ªõi
#else:
 #   st.success("")
    # ======= To√†n b·ªô code dashboard c·ªßa b·∫°n ƒë·∫∑t d∆∞·ªõi ƒë√¢y =======
#    st.write()

# === Load d·ªØ li·ªáu g·ªëc v√† mapping ===
df = pd.read_excel("dthumodel.xlsx")
dthu_thang9 = pd.read_excel("dthut9.xlsx")
mapping = pd.read_excel("mapping_NH.xlsx")
dthu_thang8 = pd.read_excel("dthuthang.xlsx")

# Chu·∫©n h√≥a t√™n c·ªôt
df.columns = df.columns.str.strip()
mapping.columns = mapping.columns.str.strip()
dthu_thang8.columns = dthu_thang8.columns.str.strip()

# Merge ƒë·ªÉ l·∫•y c·ªôt NH (FMCG, Fresh, ƒê√¥ng m√°t...)
df = df.merge(mapping, on="Ng√†nh h√†ng", how="left")

# === B·ªô l·ªçc AM & Si√™u th·ªã ===
col1, col2 = st.columns(2)

with col1:
    am_list = sorted(df["AM"].dropna().unique())
    am_chon = st.multiselect("Ch·ªçn AM", options=am_list, default=am_list[:1])

df_am = df[df["AM"].isin(am_chon)] if am_chon else df.copy()

with col2:
    sieuthi_list = sorted(df_am["M√£ si√™u th·ªã"].dropna().unique())
    sieuthi_chon = st.multiselect(
        "Ch·ªçn Si√™u th·ªã",
        options=sieuthi_list,
        default=sieuthi_list[:1] if sieuthi_list else []
    )
st.header(f"Doanh thu BHX {sieuthi_chon}")
# L·ªçc d·ªØ li·ªáu cu·ªëi c√πng
df_filtered = df_am[df_am["M√£ si√™u th·ªã"].isin(sieuthi_chon)] if sieuthi_chon else df_am.copy()

# ===================================
# Mapping doanh thu T8 t·ª´ file dthuthang.xlsx
if sieuthi_chon:
    doanhthu_t8 = (
        dthu_thang8[
            (dthu_thang8["M√£ si√™u th·ªã"].isin(sieuthi_chon))
        ]["T·ªïng doanh thu"].sum() 
    )
else:
    doanhthu_t8 = (
        dthu_thang8[
            (dthu_thang8["Th√°ng"] == "T8") &
            (dthu_thang8["AM"].isin(am_chon))
        ]["T·ªïng doanh thu"].sum()
    )

# T√≠nh KPI
doanhthu_hientai = df_filtered["T·ªïng doanh thu"].sum() 

today = datetime.date.today()
ngay = today.day 

if ngay > 1:
    doanhthu_du_kien = doanhthu_hientai / (ngay - 1) * 30 
else:
    doanhthu_du_kien = doanhthu_hientai 

#def format_vnd(value):
 #   # L√†m tr√≤n v·ªÅ tri·ªáu
  #  value = round(value, -6)  
   # ty = value // 1_000_000_000
    #trieu = (value % 1_000_000_000) // 1_000_000

    #if ty > 0 and trieu > 0:
     #   return f"{ty} t·ªâ {trieu} tri·ªáu"
    #elif ty > 0:
     #   return f"{ty} t·ªâ"
    #else:
     #   return f"{trieu} tri·ªáu"

def format_vnd(value: int) -> str:
    if value >= 1_000_000_000:
        return f"{value/1_000_000_000:.1f} T·ªâ".rstrip("0").rstrip(".")
    elif value >= 1_000_000:
        return f"{value/1_000_000:.0f} Tri·ªáu"
    else:
        return f"{value/1_000_000:,.0f} Tri·ªáu"  # tr∆∞·ªùng h·ª£p nh·ªè h∆°n 1 tri·ªáu
     
    
tangtruong_t8 = ( (doanhthu_du_kien / (doanhthu_t8)) - 1 ) * 100
tanggiam = doanhthu_du_kien - doanhthu_t8

dthutbngay = doanhthu_hientai / (ngay - 1)
dthutbngaythangtruoc = doanhthu_t8 / 31
tanggiamtbngay = dthutbngay - dthutbngaythangtruoc

trai1, phai1 = st.columns(2)

with trai1:
    # === Hi·ªÉn th·ªã KPI ===
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Doanh thu ƒë·∫øn hi·ªán t·∫°i", format_vnd(doanhthu_hientai))
    with col2:
        st.metric("D·ª± ki·∫øn h·∫øt th√°ng", format_vnd(doanhthu_du_kien), delta=format_vnd(tanggiam))
    with col3:
        st.metric("TƒÉng tr∆∞·ªüng so th√°ng tr∆∞·ªõc", f"{tangtruong_t8:.1f}%", delta=f"{tangtruong_t8:.1f}%")
    with col4:
        st.metric("Doanh thu trung b√¨nh ng√†y", format_vnd(dthutbngay), delta=format_vnd(tanggiamtbngay))
        
with phai1:
    st.metric("Doanh thu ƒë·∫øn hi·ªán t·∫°i", format_vnd(doanhthu_hientai))


    
#================================


# === Bi·ªÉu ƒë·ªì tr√≤n FMCG vs Fresh ===
st.subheader("ü•ß C∆° c·∫•u Doanh thu FMCG vs Fresh")

tong_doanhthu_nh = (
    df_filtered.groupby("NH")[["T·ªïng doanh thu"]]
    .sum()
    .reset_index()
) 

if ngay > 1:
    tong_doanhthu_nh["D·ª± ki·∫øn T9"] = (tong_doanhthu_nh["T·ªïng doanh thu"] / (ngay - 1) * 30).round(0)
else:
    tong_doanhthu_nh["D·ª± ki·∫øn T9"] = tong_doanhthu_nh["T·ªïng doanh thu"]

# T√≠nh t·ªâ tr·ªçng
tong_all = tong_doanhthu_nh["T·ªïng doanh thu"].sum()
tong_doanhthu_nh["T·ªâ tr·ªçng (%)"] = (tong_doanhthu_nh["T·ªïng doanh thu"] / tong_all * 100).round(2)
        

fig_pie = px.pie(
    tong_doanhthu_nh,
    names="NH",
    values="T·ªïng doanh thu",
    title="C∆° c·∫•u Doanh thu FMCG vs Fresh",
    hole=0.3
)

st.plotly_chart(fig_pie, use_container_width=True)
st.dataframe(
    tong_doanhthu_nh.style.format({"T·ªïng doanh thu": "{:,.0f}","D·ª± ki·∫øn T9": "{:,.0f}","T·ªâ tr·ªçng (%)": "{:,.2f}"})
)

#===================================
 
# Chia layout 2 c·ªôt
col1, col2 = st.columns(2)

# === Top 10 Nh√≥m h√†ng ===
with col1:
    st.subheader("üîù Top 10 Nh√≥m h√†ng doanh thu cao nh·∫•t")

    tong_doanhthu = df_filtered["T·ªïng doanh thu"].sum()

    top10_nhomhang = (
        df_filtered.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m c·ªôt t·ªâ tr·ªçng
    top10_nhomhang["T·ªâ tr·ªçng (%)"] = (top10_nhomhang["T·ªïng doanh thu"] / tong_doanhthu * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig = px.bar(
        top10_nhomhang,
        x="Nh√≥m h√†ng",
        y="T·ªïng doanh thu",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng doanh thu cao nh·∫•t",
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt
    st.dataframe(
        top10_nhomhang.style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )


# === Top 10 Nh√≥m h√†ng FMCG ===
with col2:
    st.subheader("üîù Top 10 Nh√≥m h√†ng (FMCG) doanh thu cao nh·∫•t")

    df_fmcg = df_filtered[df_filtered["NH"] == "FMCG"]

    tong_doanhthu_fmcg = df_fmcg["T·ªïng doanh thu"].sum()

    top10_fmcg = (
        df_fmcg.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m t·ªâ tr·ªçng trong FMCG
    top10_fmcg["T·ªâ tr·ªçng (%)"] = (top10_fmcg["T·ªïng doanh thu"] / tong_doanhthu_fmcg * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig_fmcg = px.bar(
        top10_fmcg,
        x="Nh√≥m h√†ng",
        y="T·ªïng doanh thu",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng (FMCG) doanh thu cao nh·∫•t",
        height=500
    )
    st.plotly_chart(fig_fmcg, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        top10_fmcg.style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )



#=======================================================================

# Chia b·ªë c·ª•c 2 c·ªôt
col1, col2 = st.columns(2)

# === Top 5 Model trong Top 10 Nh√≥m h√†ng FMCG ===
with col2:
    st.subheader("‚≠ê Top 5 Model b√°n t·ªët nh·∫•t trong 10 Nh√≥m h√†ng FMCG")

    # L·∫•y danh s√°ch 10 nh√≥m h√†ng FMCG
    list_top10_fmcg = top10_fmcg["Nh√≥m h√†ng"].tolist()
    df_top10_fmcg = df_fmcg[df_fmcg["Nh√≥m h√†ng"].isin(list_top10_fmcg)]

    # T√≠nh t·ªïng doanh thu v√† s·ªë l∆∞·ª£ng theo model
    top5_models_fmcg = (
        df_top10_fmcg.groupby(["Nh√≥m h√†ng", "Model"])[["T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .sum()
        .reset_index()
    )

    # L·∫•y top 5 model theo doanh thu trong t·ª´ng nh√≥m h√†ng
    result_fmcg = (
        top5_models_fmcg
        .sort_values(["Nh√≥m h√†ng", "T·ªïng doanh thu"], ascending=[True, False])
        .groupby("Nh√≥m h√†ng")
        .head(5)
        .reset_index(drop=True)
    )

    # S·∫Øp x·∫øp nh√≥m h√†ng theo t·ªïng doanh thu gi·∫£m d·∫ßn
    nhomhang_order_fmcg = (
        df_top10_fmcg.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .reset_index()
    )

    result_fmcg = result_fmcg.merge(nhomhang_order_fmcg, on="Nh√≥m h√†ng", suffixes=("", "_nhom"))
    result_fmcg = result_fmcg.sort_values(["T·ªïng doanh thu_nhom", "T·ªïng doanh thu"], ascending=[False, False])

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        result_fmcg[["Nh√≥m h√†ng", "Model", "T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªïng s·ªë l∆∞·ª£ng": "{:,.0f}"
        })
    )


# === Top 5 Model trong Top 10 Nh√≥m h√†ng ===
with col1:
    st.subheader("‚≠ê Top 5 Model trong 10 Nh√≥m h√†ng doanh thu cao nh·∫•t")

    list_top10 = top10_nhomhang["Nh√≥m h√†ng"].tolist()
    df_top10 = df_filtered[df_filtered["Nh√≥m h√†ng"].isin(list_top10)]

    top5_models_per_group = (
        df_top10.groupby(["Nh√≥m h√†ng", "Model"])[["T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .sum()
        .reset_index()
    )

    result = (
        top5_models_per_group
        .sort_values(["Nh√≥m h√†ng", "T·ªïng doanh thu"], ascending=[True, False])
        .groupby("Nh√≥m h√†ng")
        .head(5)
        .reset_index(drop=True)
    )

    # Th·ª© t·ª± nh√≥m h√†ng theo t·ªïng doanh thu
    nhomhang_order = (
        df_top10.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]] 
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .reset_index()
    )

    result = result.merge(nhomhang_order, on="Nh√≥m h√†ng", suffixes=("", "_nhom"))
    result = result.sort_values(["T·ªïng doanh thu_nhom", "T·ªïng doanh thu"], ascending=[False, False])

    st.dataframe(
        result[["Nh√≥m h√†ng", "Model", "T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªïng s·ªë l∆∞·ª£ng": "{:,.0f}"
        })
    )


#=============================================================================

col1, col2 = st.columns(2)

# === Top 10 Nh√≥m h√†ng ƒê√îNG M√ÅT ===
with col1:
    st.subheader("üîù Top 10 Nh√≥m h√†ng (ƒê√îNG M√ÅT) theo doanh thu")

    df_dm = df_filtered[df_filtered["NH"] == "ƒê√îNG M√ÅT"]

    tong_doanhthu_dm = df_dm["T·ªïng doanh thu"].sum()

    top10_dm = (
        df_dm.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m t·ªâ tr·ªçng
    top10_dm["T·ªâ tr·ªçng (%)"] = (top10_dm["T·ªïng doanh thu"] / tong_doanhthu_dm * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig_dm = px.bar(
        top10_dm,
        x="Nh√≥m h√†ng",
        y="T·ªïng doanh thu",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng (ƒê√îNG M√ÅT)",
        height=500
    )
    st.plotly_chart(fig_dm, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        top10_dm.style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )


# === Top 10 Nh√≥m h√†ng FRESH ===
with col2:
    st.subheader("üîù Top 10 Nh√≥m h√†ng (FRESH) theo s·∫£n l∆∞·ª£ng")

    df_fr = df_filtered[df_filtered["NH"] == "FRESH"]

    tong_sl_fr = df_fr["T·ªïng s·ªë l∆∞·ª£ng"].sum()

    top10_fr = (
        df_fr.groupby("Nh√≥m h√†ng")[["T·ªïng s·ªë l∆∞·ª£ng"]]
        .sum()
        .sort_values("T·ªïng s·ªë l∆∞·ª£ng", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m t·ªâ tr·ªçng
    top10_fr["T·ªâ tr·ªçng (%)"] = (top10_fr["T·ªïng s·ªë l∆∞·ª£ng"] / tong_sl_fr * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig_fr = px.bar(
        top10_fr,
        x="Nh√≥m h√†ng",
        y="T·ªïng s·ªë l∆∞·ª£ng",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng (FRESH)",
        height=500
    )
    st.plotly_chart(fig_fr, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        top10_fr.style.format({
            "T·ªïng s·ªë l∆∞·ª£ng": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )
