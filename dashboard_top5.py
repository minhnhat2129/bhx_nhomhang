import streamlit as st
import pandas as pd
import plotly.express as px
import datetime

st.set_page_config(page_title="Dashboard Doanh thu", layout="wide")
st.title("üìä Dashboard Doanh thu BHX")

# === Load d·ªØ li·ªáu g·ªëc v√† mapping ===
df = pd.read_excel("dthumodel.xlsx")
mapping = pd.read_excel("mapping_NH.xlsx")
dthu_thang8 = pd.read_excel("dthuthang.xlsx")



# Chu·∫©n h√≥a t√™n c·ªôt
df.columns = df.columns.str.strip()
mapping.columns = mapping.columns.str.strip()
dthu_thang8.columns = dthu_thang8.columns.str.strip()

# Merge ƒë·ªÉ l·∫•y c·ªôt NH (FMCG vs Fresh)
df = df.merge(mapping, on="Ng√†nh h√†ng", how="left")

# === B·ªô l·ªçc AM & Si√™u th·ªã ===
col1, col2 = st.columns(2)

with col1:
    am_list = sorted(df["AM"].dropna().unique())
    am_chon = st.multiselect("Ch·ªçn AM", options=am_list, default=am_list[:1])

df_am = df[df["AM"].isin(am_chon)] if am_chon else df.copy()

with col2:
    sieuthi_list = sorted(df_am["M√£ si√™u th·ªã"].dropna().unique())
    sieuthi_chon = st.multiselect(
        "Ch·ªçn Si√™u th·ªã",
        options=sieuthi_list,
        default=sieuthi_list[:1] if sieuthi_list else []
    )


# L·ªçc d·ªØ li·ªáu cu·ªëi c√πng
df_filtered = df_am[df_am["M√£ si√™u th·ªã"].isin(sieuthi_chon)] if sieuthi_chon else df_am.copy()

#===================================

    
# L·ªçc d·ªØ li·ªáu th√°ng 8 trong file dthuthang.xlsx
doanhthu_t8 = dthu_thang8[dthu_thang8["Th√°ng"] == "T8"].copy()

# ƒê·ªïi t√™n c·ªôt doanh thu ƒë·ªÉ tr√°nh tr√πng
doanhthu_t8 = doanhthu_t8.rename(columns={"T·ªïng doanh thu": "Doanh thu T8"})

# Merge v·ªõi d·ªØ li·ªáu filter theo M√£ si√™u th·ªã
df_kpi = df_filtered.merge(
    doanhthu_t8[["M√£ si√™u th·ªã", "Doanh thu T8"]],
    on="M√£ si√™u th·ªã",
    how="left"
)    

# T√≠nh t·ªïng doanh thu T8
tong_doanhthu_t8 = df_kpi["Doanh thu T8"].sum()

# === KPI d√≤ng 1 & 2 ===
doanhthu_hientai = df_filtered["T·ªïng doanh thu"].sum()

today = datetime.date.today()
ngay = today.day

if ngay > 1:
    doanhthu_du_kien = doanhthu_hientai / (ngay - 1) * 30
else:
    doanhthu_du_kien = doanhthu_hientai


col1, col2, col3 = st.columns(3)
with col1:
    st.metric("üí∞ Doanh thu ƒë·∫øn hi·ªán t·∫°i", f"{doanhthu_hientai:,.0f}")
with col2:
    st.metric("üìÖ D·ª± ki·∫øn th√°ng 9", f"{doanhthu_du_kien:,.0f}")
with col3:
    st.metric("üìÖ Doanh thu T8", f"{tong_doanhthu_t8:,.0f}")
    
#================================


# === Bi·ªÉu ƒë·ªì tr√≤n FMCG vs Fresh ===
st.subheader("ü•ß C∆° c·∫•u Doanh thu FMCG vs Fresh")

tong_doanhthu_nh = (
    df_filtered.groupby("NH")[["T·ªïng doanh thu"]]
    .sum()
    .reset_index()
) 

if ngay > 1:
    tong_doanhthu_nh["D·ª± ki·∫øn T9"] = (tong_doanhthu_nh["T·ªïng doanh thu"] / (ngay - 1) * 30).round(0)
else:
    tong_doanhthu_nh["D·ª± ki·∫øn T9"] = tong_doanhthu_nh["T·ªïng doanh thu"]

# T√≠nh t·ªâ tr·ªçng
tong_all = tong_doanhthu_nh["T·ªïng doanh thu"].sum()
tong_doanhthu_nh["T·ªâ tr·ªçng (%)"] = (tong_doanhthu_nh["T·ªïng doanh thu"] / tong_all * 100).round(2)
        

fig_pie = px.pie(
    tong_doanhthu_nh,
    names="NH",
    values="T·ªïng doanh thu",
    title="C∆° c·∫•u Doanh thu FMCG vs Fresh",
    hole=0.3
)

st.plotly_chart(fig_pie, use_container_width=True)
st.dataframe(
    tong_doanhthu_nh.style.format({"T·ªïng doanh thu": "{:,.0f}","D·ª± ki·∫øn T9": "{:,.0f}","T·ªâ tr·ªçng (%)": "{:,.2f}"})
)

#===================================
 
# Chia layout 2 c·ªôt
col1, col2 = st.columns(2)

# === Top 10 Nh√≥m h√†ng ===
with col1:
    st.subheader("üîù Top 10 Nh√≥m h√†ng doanh thu cao nh·∫•t")

    tong_doanhthu = df_filtered["T·ªïng doanh thu"].sum()

    top10_nhomhang = (
        df_filtered.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m c·ªôt t·ªâ tr·ªçng
    top10_nhomhang["T·ªâ tr·ªçng (%)"] = (top10_nhomhang["T·ªïng doanh thu"] / tong_doanhthu * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig = px.bar(
        top10_nhomhang,
        x="Nh√≥m h√†ng",
        y="T·ªïng doanh thu",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng doanh thu cao nh·∫•t",
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng chi ti·∫øt
    st.dataframe(
        top10_nhomhang.style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )


# === Top 10 Nh√≥m h√†ng FMCG ===
with col2:
    st.subheader("üîù Top 10 Nh√≥m h√†ng (FMCG) doanh thu cao nh·∫•t")

    df_fmcg = df_filtered[df_filtered["NH"] == "FMCG"]

    tong_doanhthu_fmcg = df_fmcg["T·ªïng doanh thu"].sum()

    top10_fmcg = (
        df_fmcg.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m t·ªâ tr·ªçng trong FMCG
    top10_fmcg["T·ªâ tr·ªçng (%)"] = (top10_fmcg["T·ªïng doanh thu"] / tong_doanhthu_fmcg * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig_fmcg = px.bar(
        top10_fmcg,
        x="Nh√≥m h√†ng",
        y="T·ªïng doanh thu",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng (FMCG) doanh thu cao nh·∫•t",
        height=500
    )
    st.plotly_chart(fig_fmcg, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        top10_fmcg.style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )



#=======================================================================

# Chia b·ªë c·ª•c 2 c·ªôt
col1, col2 = st.columns(2)

# === Top 5 Model trong Top 10 Nh√≥m h√†ng FMCG ===
with col2:
    st.subheader("‚≠ê Top 5 Model b√°n t·ªët nh·∫•t trong 10 Nh√≥m h√†ng FMCG")

    # L·∫•y danh s√°ch 10 nh√≥m h√†ng FMCG
    list_top10_fmcg = top10_fmcg["Nh√≥m h√†ng"].tolist()
    df_top10_fmcg = df_fmcg[df_fmcg["Nh√≥m h√†ng"].isin(list_top10_fmcg)]

    # T√≠nh t·ªïng doanh thu v√† s·ªë l∆∞·ª£ng theo model
    top5_models_fmcg = (
        df_top10_fmcg.groupby(["Nh√≥m h√†ng", "Model"])[["T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .sum()
        .reset_index()
    )

    # L·∫•y top 5 model theo doanh thu trong t·ª´ng nh√≥m h√†ng
    result_fmcg = (
        top5_models_fmcg
        .sort_values(["Nh√≥m h√†ng", "T·ªïng doanh thu"], ascending=[True, False])
        .groupby("Nh√≥m h√†ng")
        .head(5)
        .reset_index(drop=True)
    )

    # S·∫Øp x·∫øp nh√≥m h√†ng theo t·ªïng doanh thu gi·∫£m d·∫ßn
    nhomhang_order_fmcg = (
        df_top10_fmcg.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .reset_index()
    )

    result_fmcg = result_fmcg.merge(nhomhang_order_fmcg, on="Nh√≥m h√†ng", suffixes=("", "_nhom"))
    result_fmcg = result_fmcg.sort_values(["T·ªïng doanh thu_nhom", "T·ªïng doanh thu"], ascending=[False, False])

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        result_fmcg[["Nh√≥m h√†ng", "Model", "T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªïng s·ªë l∆∞·ª£ng": "{:,.0f}"
        })
    )


# === Top 5 Model trong Top 10 Nh√≥m h√†ng ===
with col1:
    st.subheader("‚≠ê Top 5 Model trong 10 Nh√≥m h√†ng doanh thu cao nh·∫•t")

    list_top10 = top10_nhomhang["Nh√≥m h√†ng"].tolist()
    df_top10 = df_filtered[df_filtered["Nh√≥m h√†ng"].isin(list_top10)]

    top5_models_per_group = (
        df_top10.groupby(["Nh√≥m h√†ng", "Model"])[["T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .sum()
        .reset_index()
    )

    result = (
        top5_models_per_group
        .sort_values(["Nh√≥m h√†ng", "T·ªïng doanh thu"], ascending=[True, False])
        .groupby("Nh√≥m h√†ng")
        .head(5)
        .reset_index(drop=True)
    )

    # Th·ª© t·ª± nh√≥m h√†ng theo t·ªïng doanh thu
    nhomhang_order = (
        df_top10.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]] 
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .reset_index()
    )

    result = result.merge(nhomhang_order, on="Nh√≥m h√†ng", suffixes=("", "_nhom"))
    result = result.sort_values(["T·ªïng doanh thu_nhom", "T·ªïng doanh thu"], ascending=[False, False])

    st.dataframe(
        result[["Nh√≥m h√†ng", "Model", "T·ªïng doanh thu", "T·ªïng s·ªë l∆∞·ª£ng"]]
        .style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªïng s·ªë l∆∞·ª£ng": "{:,.0f}"
        })
    )


#=============================================================================

col1, col2 = st.columns(2)

# === Top 10 Nh√≥m h√†ng ƒê√îNG M√ÅT ===
with col1:
    st.subheader("üîù Top 10 Nh√≥m h√†ng (ƒê√îNG M√ÅT) theo doanh thu")

    df_dm = df_filtered[df_filtered["NH"] == "ƒê√îNG M√ÅT"]

    tong_doanhthu_dm = df_dm["T·ªïng doanh thu"].sum()

    top10_dm = (
        df_dm.groupby("Nh√≥m h√†ng")[["T·ªïng doanh thu"]]
        .sum()
        .sort_values("T·ªïng doanh thu", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m t·ªâ tr·ªçng
    top10_dm["T·ªâ tr·ªçng (%)"] = (top10_dm["T·ªïng doanh thu"] / tong_doanhthu_dm * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig_dm = px.bar(
        top10_dm,
        x="Nh√≥m h√†ng",
        y="T·ªïng doanh thu",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng (ƒê√îNG M√ÅT)",
        height=500
    )
    st.plotly_chart(fig_dm, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        top10_dm.style.format({
            "T·ªïng doanh thu": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )


# === Top 10 Nh√≥m h√†ng FRESH ===
with col2:
    st.subheader("üîù Top 10 Nh√≥m h√†ng (FRESH) theo s·∫£n l∆∞·ª£ng")

    df_fr = df_filtered[df_filtered["NH"] == "FRESH"]

    tong_sl_fr = df_fr["T·ªïng s·ªë l∆∞·ª£ng"].sum()

    top10_fr = (
        df_fr.groupby("Nh√≥m h√†ng")[["T·ªïng s·ªë l∆∞·ª£ng"]]
        .sum()
        .sort_values("T·ªïng s·ªë l∆∞·ª£ng", ascending=False)
        .head(10)
        .reset_index()
    )

    # Th√™m t·ªâ tr·ªçng
    top10_fr["T·ªâ tr·ªçng (%)"] = (top10_fr["T·ªïng s·ªë l∆∞·ª£ng"] / tong_sl_fr * 100).round(2)

    # V·∫Ω bi·ªÉu ƒë·ªì
    fig_fr = px.bar(
        top10_fr,
        x="Nh√≥m h√†ng",
        y="T·ªïng s·ªë l∆∞·ª£ng",
        text_auto=".2s",
        title="Top 10 Nh√≥m h√†ng (FRESH)",
        height=500
    )
    st.plotly_chart(fig_fr, use_container_width=True)

    # Hi·ªÉn th·ªã b·∫£ng
    st.dataframe(
        top10_fr.style.format({
            "T·ªïng s·ªë l∆∞·ª£ng": "{:,.0f}",
            "T·ªâ tr·ªçng (%)": "{:,.2f}"
        })
    )
